

##描述：
    1、表示用户交互的一个界面（活动），每一个activity对应一个界面。
    2、是所有View的容器。
    3、有个ActivityManager的管理服务类，用于维护与管理Activity的启动与销毁。Activity启动时，会把Activity的引用放入任务栈中。
    4、一个应用程序可以被别的应用程序的activity开启此时，是将此应用程序的引用加入到了开启的那个activity的任务栈中了。

##创建Activity
    1、定义类继承自Activity类；
    2、在清单文件中Application节点中声明<activity>节点；

##启动Activity
####显示启动：
    启动当前应用内的Activity，这样的启动方式比较快速。
```
Intent intent = new Intent(this, OtherActivity.class);
startActivity(intent);
```
####隐示启动
一般用于调用其他应用的Activity，创建Intent后指定动作和数据以及类型。
1、启动系统自带应用
```
//  ex:拨打电话（Android6.0注意申请权限）
Intent intent = new Intent();
intent.setAction(Intent.ACTION_CALL);
intent.setData(Uri.parse("tel://123456"));
startActivity(intent);

//ex：打开网页
Intent intent = new Intent();
intent.setAction(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.baidu.com"));
startActivity(intent);
```
2、启动第三方应用
```
//1、启动主Acitvity
//Intent intent = new Intent(Intent.ACTION_MAIN);
//intent.addCategory(Intent.CATEGORY_LAUNCHER);

//有 <intent-filter>标签的Activity默认  android:exported="true"
Intent intent = new Intent();
//参数是包名，类全限定名，注意直接用类名不行
ComponentName cn = new ComponentName("com.example.liucun.myapplication",
"com.example.liucun.myapplication.MainActivity");
intent.setComponent(cn);
startActivity(intent);

//2、启动非主Activity
//必须要在manifest里面设置exported属性为true，表示此activity对外公开，才能直接跳转。
Intent intent = new Intent();
intent.setClassName("com.example.liucun.myapplication",
    "com.example.liucun.myapplication.test.SecondActivity");
startActivity(intent);
```

##Activity生命周期
1、Acitivity三种状态
a、运行：activity在最前端运行;
b、暂停：activity可见，但前端还有其他activity，注意：在当前Activitiiy弹出的对话框是Activity的一部分，弹出时，不会执行onPause方法；
c、停止：activity不可见，完全被覆盖;

2、生命周期相关的方法（都是系统自动调用，都以 on 开头）：
a.  onCreate：	创建时调用，或者程序在暂停、停止状态下被杀死之后重新打开时也会调用；
b.	onStart：    onCreate之后或者从停止状态恢复时调用；(界面可见)
c.	onResume：	onStart之后或者从暂停状态恢复时调用，从停止状态恢复时由于调用onStart，也会调用onResume（界面获得焦点）；
d.	onPause：	进入暂停、停止状态，或者销毁时会调用（界面失去焦点）；
e.	onStop：		进入停止状态，或者销毁时会调用；（界面不可见）
f.	onDestroy：	销毁时调用；
g.	onRestart：	从停止状态恢复时调用；
![图片.png](http://upload-images.jianshu.io/upload_images/7003274-2ffdb865fe1b57e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

##横竖屏切换与信息的保存和恢复
1、切换横竖屏时，会自动查找layout-port 、layout-land中的布局文件。
2、默认情况下，切换时，将执行摧毁onPause onStop onDestroy，再重置加载新的布局onCreate  onStart  onResume。
3、切换时如果要保存数据, 可以重写: onSaveInstanceState();
恢复数据时, 重写: onRestoreInstanceState()。
4、固定横屏或竖屏:android:screenOrientation="landscape"
横竖屏切换, 不摧毁界面(程序继续执行) android:configChanges="orientation|keyboardHidden|screenSize"
5、保存信息状态的相关方法:
a.	onSaveInstanceState：
在Activity被动的摧毁或停止的时候调用（如横竖屏切换,来电），用于保存运行数据，可以将数据存在在Bundle中；
b.	onRestoreInstanceState：
该方法在Activity被重新绘制的时候调用，例如改变屏幕方向，onSavedInstanceState可为onSaveInstanceState保存的数据

##Activity四种启动模式
######任务栈的概念
一个手机里面有多少个任务栈：
一般情况下，有多少个应用正在运行，就对应开启多少个任务栈；
一般情况下，每开启一个应用程序就会创建一个与之对应的任务栈；
二般情况下，如launchMode为 singleInstance，就创建自己单独的任务栈；
######任务栈的作用
1、它是存放Activity的引用的，Activity不同的启动模式，对应不同的任务栈的存放；
2、可通过getTaskId()来获取任务栈的ID，如果前面的任务栈已经清空，新开的任务栈ID+1，是自动增长的；
######启动模式
在AndroidManifest.xml中的<activity>标签中可以配置android:launchMode属性，用来控制Actvity的启动模式；在Android系统中我们创建的Acitivity是以栈的形式呈现的：
1、standard：默认的，每次调用startActivity()启动时都会创建一个新的Activity放在栈顶；
2、singleTop：启动Activity时，指定Activity不在任务栈栈顶就创建，如在栈顶，则不会创建，会调用onNewInstance()，复用已经存在的实例
3、singleTask：在任务栈里面只允许一个实例，如果启动的Activity不存在就创建，如果存在直接跳转到指定的Activity所在位置，如：栈内有ABCD，D想创建A, 即A上的BCD相应的Activity将移除；
4、singleInstance：（单例）开启一个新的任务栈来存放这个Activity的实例，在整个手机操作系统里面只有一个该任务栈的实例存在，此模式开启的Activity是运行在自己单独的任务栈中的；

######应用程序、进程、任务栈的区别
1、应用程序
四大组件的集合在清单文件中都放在application节点下，对于终端用户而言，会将其理解为activity。
2、进程
操作系统分配的独立的内存空间，一般情况下，一个应用程序会对应一个进程，特殊情况下，会有多个进程，一个应用程序会对应一个或多个进程。
3、任务栈：
task stack（back stack）后退栈，记录用户的操作步骤，维护用户的操作体验，专门针对于activity而言的，只用于activity；一般使用standard，其他情况用别的。

##Activity内存管理
Android系统在运行多个进程时，如果系统资源不足，会强制结束一些进程,优先选择哪个进程来结束是有优先级的。
会按照以下顺序杀死：
①、空：  进程中没有任何组件；
②、后台：进程中只有停止状态的Activity；
③、服务：进程中有正在运行的服务；
④、可见：进程中有一个暂停状态的Activity；
⑤、前台：进程中正在运行一个Activity；
一个任务栈所有Activity在退出的时候进程不会销毁, 会保留一个空进程方便以后启动. 但在内存不足时进程会被销毁；
Activity中不要在Activity做耗时的操作, 因为Activity切换到后台之后（Activity停止了）, 内存不足时, 也容易被销毁；

空进程：任务栈清空，意味着程序退出了，但进程留着，这个就是空进程，容易被系统回收；

##Activity内存泄漏
######非静态内部类和匿名内部类持有Activity的引用
在Java中，内部类的定义与使用一般为成员内部类与匿名内部类，他们的对象都会隐式持有外部类对象的引用，影响外部类对象的回收。

GC只会回收没有被引用或者根集不可到达的对象，内部类在生命周期内始终持有外部类的对象的引用，造成外部类的对象始终不满足GC的回收条件，反映在内存上就是内存泄露。如：Activity的内存泄露。
ex:
```
public class SampleActivity extends Activity {
  private final Handler mLeakyHandler = new Handler() {
    @Override
    public void handleMessage(Message msg) {
      // ...
    }
  }

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    // 十分钟后发送一条消息
    mLeakyHandler.postDelayed(new Runnable() {
      @Override
      public void run() { /* ... */ }
    }, 1000 * 60 * 10);

    // Go back to the previous Activity.
    finish();
  }
}
```
当我们执行了Activity的finish方法，被延迟的消息会在被处理之前存在于主线程消息队列中10分钟，而这个消息中又包含了Handler的引用，而Handler是一个匿名内部类的实例，其持有外面的SampleActivity的引用，所以这导致了SampleActivity无法回收，进行导致SampleActivity持有的很多资源都无法回收，这就是我们常说的内存泄露。

注意上面的new Runnable这里也是匿名内部类实现的，同样也会持有SampleActivity的引用，也会阻止SampleActivity被回收。

######解决方案：
1、将内部类定义为static；
2、使用弱引用修饰外部类Activity。
```
public class SampleActivity extends Activity {

  private static class MyHandler extends Handler {
    private final WeakReference<sampleactivity> mActivity;

    public MyHandler(SampleActivity activity) {
      mActivity = new WeakReference<sampleactivity>(activity);
    }

    @Override
    public void handleMessage(Message msg) {
      SampleActivity activity = mActivity.get();
      if (activity != null) {
        // ...
      }
    }
  }

  private final MyHandler mHandler = new MyHandler(this);

  private static final Runnable sRunnable = new Runnable() {
      @Override
      public void run() { /* ... */ }
  };

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mHandler.postDelayed(sRunnable, 1000 * 60 * 10);

    finish();
  }
```

























Android——Activity
描述：

1、表示用户交互的一个界面（活动），每一个activity对应一个界面。
2、是所有View的容器。
3、有个ActivityManager的管理服务类，用于维护与管理Activity的启动与销毁。Activity启动时，会把Activity的引用放入任务栈中。
4、一个应用程序可以被别的应用程序的activity开启此时，是将此应用程序的引用加入到了开启的那个activity的任务栈中了。
创建Activity

1、定义类继承自Activity类；
2、在清单文件中Application节点中声明<activity>节点；
启动Activity
显示启动：

启动当前应用内的Activity，这样的启动方式比较快速。

Intent intent = new Intent(this, OtherActivity.class);
startActivity(intent);

隐示启动

一般用于调用其他应用的Activity，创建Intent后指定动作和数据以及类型。
1、启动系统自带应用

//  ex:拨打电话（Android6.0注意申请权限）
Intent intent = new Intent();
intent.setAction(Intent.ACTION_CALL);
intent.setData(Uri.parse("tel://123456"));
startActivity(intent);

//ex：打开网页
Intent intent = new Intent();
intent.setAction(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.baidu.com"));
startActivity(intent);

2、启动第三方应用

//1、启动主Acitvity
//Intent intent = new Intent(Intent.ACTION_MAIN);
//intent.addCategory(Intent.CATEGORY_LAUNCHER);

//有 <intent-filter>标签的Activity默认  android:exported="true"
Intent intent = new Intent();
//参数是包名，类全限定名，注意直接用类名不行
ComponentName cn = new ComponentName("com.example.liucun.myapplication",
"com.example.liucun.myapplication.MainActivity");
intent.setComponent(cn);
startActivity(intent);

//2、启动非主Activity
//必须要在manifest里面设置exported属性为true，表示此activity对外公开，才能直接跳转。
Intent intent = new Intent();
intent.setClassName("com.example.liucun.myapplication",
    "com.example.liucun.myapplication.test.SecondActivity");
startActivity(intent);

Activity生命周期

1、Acitivity三种状态
a、运行：activity在最前端运行;
b、暂停：activity可见，但前端还有其他activity，注意：在当前Activitiiy弹出的对话框是Activity的一部分，弹出时，不会执行onPause方法；
c、停止：activity不可见，完全被覆盖;

2、生命周期相关的方法（都是系统自动调用，都以 on 开头）：
a. onCreate： 创建时调用，或者程序在暂停、停止状态下被杀死之后重新打开时也会调用；
b. onStart： onCreate之后或者从停止状态恢复时调用；(界面可见)
c. onResume： onStart之后或者从暂停状态恢复时调用，从停止状态恢复时由于调用onStart，也会调用onResume（界面获得焦点）；
d. onPause： 进入暂停、停止状态，或者销毁时会调用（界面失去焦点）；
e. onStop： 进入停止状态，或者销毁时会调用；（界面不可见）
f. onDestroy： 销毁时调用；
g. onRestart： 从停止状态恢复时调用；
图片.png
图片.png

横竖屏切换与信息的保存和恢复

1、切换横竖屏时，会自动查找layout-port 、layout-land中的布局文件。
2、默认情况下，切换时，将执行摧毁onPause onStop onDestroy，再重置加载新的布局onCreate onStart onResume。
3、切换时如果要保存数据, 可以重写: onSaveInstanceState();
恢复数据时, 重写: onRestoreInstanceState()。
4、固定横屏或竖屏:android:screenOrientation="landscape"
横竖屏切换, 不摧毁界面(程序继续执行) android:configChanges="orientation|keyboardHidden|screenSize"
5、保存信息状态的相关方法:
a. onSaveInstanceState：
在Activity被动的摧毁或停止的时候调用（如横竖屏切换,来电），用于保存运行数据，可以将数据存在在Bundle中；
b. onRestoreInstanceState：
该方法在Activity被重新绘制的时候调用，例如改变屏幕方向，onSavedInstanceState可为onSaveInstanceState保存的数据
Activity四种启动模式
任务栈的概念

一个手机里面有多少个任务栈：
一般情况下，有多少个应用正在运行，就对应开启多少个任务栈；
一般情况下，每开启一个应用程序就会创建一个与之对应的任务栈；
二般情况下，如launchMode为 singleInstance，就创建自己单独的任务栈；
任务栈的作用

1、它是存放Activity的引用的，Activity不同的启动模式，对应不同的任务栈的存放；
2、可通过getTaskId()来获取任务栈的ID，如果前面的任务栈已经清空，新开的任务栈ID+1，是自动增长的；
启动模式

在AndroidManifest.xml中的<activity>标签中可以配置android:launchMode属性，用来控制Actvity的启动模式；在Android系统中我们创建的Acitivity是以栈的形式呈现的：
1、standard：默认的，每次调用startActivity()启动时都会创建一个新的Activity放在栈顶；
2、singleTop：启动Activity时，指定Activity不在任务栈栈顶就创建，如在栈顶，则不会创建，会调用onNewInstance()，复用已经存在的实例
3、singleTask：在任务栈里面只允许一个实例，如果启动的Activity不存在就创建，如果存在直接跳转到指定的Activity所在位置，如：栈内有ABCD，D想创建A, 即A上的BCD相应的Activity将移除；
4、singleInstance：（单例）开启一个新的任务栈来存放这个Activity的实例，在整个手机操作系统里面只有一个该任务栈的实例存在，此模式开启的Activity是运行在自己单独的任务栈中的；
应用程序、进程、任务栈的区别

1、应用程序
四大组件的集合在清单文件中都放在application节点下，对于终端用户而言，会将其理解为activity。
2、进程
操作系统分配的独立的内存空间，一般情况下，一个应用程序会对应一个进程，特殊情况下，会有多个进程，一个应用程序会对应一个或多个进程。
3、任务栈：
task stack（back stack）后退栈，记录用户的操作步骤，维护用户的操作体验，专门针对于activity而言的，只用于activity；一般使用standard，其他情况用别的。
Activity内存管理

Android系统在运行多个进程时，如果系统资源不足，会强制结束一些进程,优先选择哪个进程来结束是有优先级的。
会按照以下顺序杀死：
①、空： 进程中没有任何组件；
②、后台：进程中只有停止状态的Activity；
③、服务：进程中有正在运行的服务；
④、可见：进程中有一个暂停状态的Activity；
⑤、前台：进程中正在运行一个Activity；
一个任务栈所有Activity在退出的时候进程不会销毁, 会保留一个空进程方便以后启动. 但在内存不足时进程会被销毁；
Activity中不要在Activity做耗时的操作, 因为Activity切换到后台之后（Activity停止了）, 内存不足时, 也容易被销毁；

空进程：任务栈清空，意味着程序退出了，但进程留着，这个就是空进程，容易被系统回收；
Activity内存泄漏
非静态内部类和匿名内部类持有Activity的引用

在Java中，内部类的定义与使用一般为成员内部类与匿名内部类，他们的对象都会隐式持有外部类对象的引用，影响外部类对象的回收。

GC只会回收没有被引用或者根集不可到达的对象，内部类在生命周期内始终持有外部类的对象的引用，造成外部类的对象始终不满足GC的回收条件，反映在内存上就是内存泄露。如：Activity的内存泄露。
ex:

public class SampleActivity extends Activity {
  private final Handler mLeakyHandler = new Handler() {
    @Override
    public void handleMessage(Message msg) {
      // ...
    }
  }

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    // 十分钟后发送一条消息
    mLeakyHandler.postDelayed(new Runnable() {
      @Override
      public void run() { /* ... */ }
    }, 1000 * 60 * 10);

    // Go back to the previous Activity.
    finish();
  }
}

当我们执行了Activity的finish方法，被延迟的消息会在被处理之前存在于主线程消息队列中10分钟，而这个消息中又包含了Handler的引用，而Handler是一个匿名内部类的实例，其持有外面的SampleActivity的引用，所以这导致了SampleActivity无法回收，进行导致SampleActivity持有的很多资源都无法回收，这就是我们常说的内存泄露。

注意上面的new Runnable这里也是匿名内部类实现的，同样也会持有SampleActivity的引用，也会阻止SampleActivity被回收。
解决方案：

1、将内部类定义为static；
2、使用弱引用修饰外部类Activity。

public class SampleActivity extends Activity {

  private static class MyHandler extends Handler {
    private final WeakReference<sampleactivity> mActivity;

    public MyHandler(SampleActivity activity) {
      mActivity = new WeakReference<sampleactivity>(activity);
    }

    @Override
    public void handleMessage(Message msg) {
      SampleActivity activity = mActivity.get();
      if (activity != null) {
        // ...
      }
    }
  }

  private final MyHandler mHandler = new MyHandler(this);

  private static final Runnable sRunnable = new Runnable() {
      @Override
      public void run() { /* ... */ }
  };

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mHandler.postDelayed(sRunnable, 1000 * 60 * 10);

    finish();
  }

