##描述
在 Android 系统中，广播（Broadcast）是在组件之间传播数据的一种机制，这些组件可以位于不同的进程中，起到进程间通信的作用。

BroadcastReceiver 是对发送出来的 Broadcast 进行过滤、接受和响应的组件。首先将要发送的消息和用于过滤的信息装入一个 Intent 对象，然后通过调用 Context.sendBroadcast() 、 sendOrderBroadcast() 方法把 Intent 对象以广播形式发送出去。 广播发送出去后，所有已注册的 BroadcastReceiver 会检查注册时的 IntentFilter 是否与发送的 Intent 相匹配，若匹配则会调用 BroadcastReceiver 的 onReceiver() 方法。

##原理
从实现原理看上，Android中的广播使用了观察者模式，基于消息的发布/订阅事件模型。

广播发送者和广播接收者分别属于观察者模式中的消息发布和订阅两端，ActivityManagerService属于中间的处理中心。广播发送者和广播接收者的执行是异步的，发出去的广播不会关心有无接收者接收，也不确定接收者到底是何时才能接收到。显然，整体流程与EventBus非常类似。

具体实现流程要点粗略概括如下：
1、广播接收者BroadcastReceiver通过Binder机制向AMS(Activity Manager Service)进行注册；
2、广播发送者通过binder机制向AMS发送广播；
3、AMS查找符合相应条件（IntentFilter/Permission等）的BroadcastReceiver，将广播发送到BroadcastReceiver（一般情况下是Activity）相应的消息循环队列中；
4、消息循环执行拿到此广播，回调BroadcastReceiver中的onReceive()方法。

##使用情景
广播作为Android组件间的通信方式，可以使用的场景如下：
    1、同一app内部的同一组件内的消息通信（单个或多个线程之间）；
    2、同一app内部的不同组件之间的消息通信（单个进程）；
    3、同一app具有多个进程的不同组件之间的消息通信；
    4、不同app之间的组件之间消息通信；
    5、Android系统在特定情况下与App之间的消息通信。



##广播的分类
1、普通广播：一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。

2、有序广播：有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。

3、本地广播：Android v4兼容包中给出了封装好的LocalBroadcastManager类，用于统一处理App应用内的广播问题。App应用内广播，此处的App应用以App应用进程为界。本地广播相对于全局广播，有安全性更高、效率更高的优点。

4、系统广播：Android系统中内置了多个系统广播，只要涉及到手机的基本操作，基本上都会发出相应的系统广播。如：开机启动，网络状态改变，拍照，屏幕关闭与开启，电量不足等等。每个系统广播都具有特定的intent-filter，其中主要包括具体的action，系统广播发出后，将被相应的BroadcastReceiver接收。系统广播在系统内部当特定事件发生时，由系统自动发出。
```
ex:
//网络变化广播过滤器
<intent-filter>
    <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
</intent-filter>

<intent-filter>
    <!--安装应用-->
    <action android:name="android.intent.action.PACKAGE_ADDED" />
    <!--更新应用-->
    <action android:name="android.intent.action.PACKAGE_REPLACED" />
    <!--卸载应用-->
    <action android:name="android.intent.action.PACKAGE_REMOVED" />
    <!--携带包名-->
    <data android:scheme="package" />
</intent-filter>
```



5、粘性广播：(在 android 5.0/api 21中deprecated,不再推荐使用，相应的还有粘性有序广播，同样已经deprecated)。粘性消息在发送后就一直存在于系统的消息容器里面，等待对应的处理器去处理，如果暂时没有处理器处理这个消息则一直在消息容器里面处于等待状态，粘性广播的Receiver如果被销毁，那么下次重建时会自动接收到消息数据。


##静态注册广播
静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用< receiver >标签声明，并在标签内用 < intent-filter > 标签设置过滤器。这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。
1、在清单文件中注册BroadcastReceiver（包括普通和有序广播）
```
 <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!--注册标准广播-->
        <receiver android:name=".NormalReceiver">
            <intent-filter>
                <action android:name="com.example.normal.receiver" />
            </intent-filter>
        </receiver>

       <!--注册三个有序广播-->
       <!--指定相同的 action 属性值，
             Receiver 之间的优先级使用 priority 属性来判定，
             数值越大，优先级越高-->
        <receiver android:name=".OrderReceiver_1">
            <intent-filter android:priority="100">
                <action android:name="com.example.order.receiver" />
            </intent-filter>
        </receiver>
        <receiver android:name=".OrderReceiver_2">
            <intent-filter android:priority="99">
                <action android:name="com.example.order.receiver" />
            </intent-filter>
        </receiver>
        <receiver android:name=".OrderReceiver_3">
            <intent-filter android:priority="98">
                <action android:name="com.example.order.receiver" />
            </intent-filter>
        </receiver>

    </application>
```
2、创建BroadcastReceiver子类
```
public class NormalReceiver extends BroadcastReceiver {

    private static final String TAG = "NormalReceiver";

    public NormalReceiver() { }

    @Override
    public void onReceive(Context context, Intent intent) {
        String msg = intent.getStringExtra("Msg");
        Log.e(TAG, msg);
    }
}
```
3、发送无序广播:
调用的是 sendBroadcast(Intent intent) 方法。
```
 public void sendBroadcast(View view) {
        //NORMAL_ACTION即为广播匹配的Actiion
        Intent intent = new Intent(NORMAL_ACTION);
        intent.putExtra("Msg", "Hi");
        sendBroadcast(intent);
 }
```

4、发送有序广播
调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。
```
    public void sendOrderBroadcast(View view) {
          Intent intent = new Intent(ORDER_ACTION);
          intent.putExtra("Msg", "Hi");
          sendOrderedBroadcast(intent, null);
    }
```

##动态注册广播（Java代码注册）
```
public class BroadcastReceiverActivity extends BaseActivity {

    private static final String ACTION_BROADCAST_ONE = "action_broadcast_receiver_one";
    private static final String ACTION_BROADCAST_TWO = "action_broadcast_receiver_two";
    private static final String ACTION_BROADCAST_THREE = "action_broadcast_receiver_three";

    private MyReceiver myReceiver;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_broadcast_receiver);

        initBroadcast();

        findViewById(R.id.bt_send).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(ACTION_BROADCAST_ONE);
                intent.putExtra("msg","ACTION_BROADCAST_RECEIVER");
                // 包含未启动的过的应用（也可以收到广播），默认为不包含
                intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
                //指定广播接收者的包名，只有这个包名下的接收者才可以接收到此广播
                intent.setPackage("com.android.pkqup.androidnote");
                //发送广播
                sendBroadcast(intent);
            }
        });
    }

    private void initBroadcast() {
        //注册广播
        myReceiver = new MyReceiver();
        registerReceiver(myReceiver, new IntentFilter(ACTION_BROADCAST_ONE));
        registerReceiver(myReceiver, new IntentFilter(ACTION_BROADCAST_TWO));
        registerReceiver(myReceiver, new IntentFilter(ACTION_BROADCAST_THREE));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //注销广播
        unregisterReceiver(myReceiver);
    }

    //自定义的广播接收者
    public class MyReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            switch (action){
                case ACTION_BROADCAST_ONE:
                    String msg = intent.getStringExtra("msg");
                    Log.i("MyReceiver", msg);
                    break;
                case ACTION_BROADCAST_TWO:
                    break;
                case ACTION_BROADCAST_THREE:
                    break;
            }
        }
    }
}

```

##注册本地广播（只能是动态注册）
```
public class BroadcastReceiverActivity extends BaseActivity {

    private LocalBroadcastManager localBroadcastManager;
    private LocalReceiver localReceiver;
    private final String LOCAL_ACTION = "com.example.local.receiver";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_broadcast_receiver);

        initLocalBroadcastReceiver();

        findViewById(R.id.bt_send_local).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //发送本地广播
                Intent intent = new Intent(LOCAL_ACTION);
                localBroadcastManager.sendBroadcast(intent);
            }
        });
    }

    //注册本地广播
    private void initLocalBroadcastReceiver() {
        localBroadcastManager = LocalBroadcastManager.getInstance(this);
        localReceiver = new LocalReceiver();
        localBroadcastManager.registerReceiver(localReceiver, new IntentFilter(LOCAL_ACTION));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //注销本地广播
        localBroadcastManager.unregisterReceiver(localReceiver);
    }

    public class LocalReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.e("LocalReceiver", "接收到了本地广播");
        }
    }
}

```

##广播的生命周期
1、广播接收者的生命周期非常短暂的，在接收到广播的时候创建，onReceive()方法结束之后销毁；
2、广播接收者中不要做一些耗时的工作，否则会弹出Application No Response错误对话框；
3、最好也不要在广播接收者中创建子线程做耗时的工作，因为广播接收者被销毁后进程就成为了空进程，很容易被系统杀掉；
4、耗时的较长的工作最好放在服务中完成。

##广播的安全性
由于 BroadcastReceiver 的设计之初是从全局考虑的，可以方便应用程序和系统、应用程序之间、应用程序内的通信，所以对单个应用程序而难免存在安全方面的问题，所以，为了避免安全问题，可以从以下几个方面入手：
1、发送广播时：
1.1发送带权限的广播，在发送广播时指定权限，这样接收者就必须声明对应的权限才能接收到该广播；
1.2指定接收广播的包名，intent.setPackage("com.package.name")；

2、注册广播时：
2.1注册广播时指定权限；
2.2注册广播时使用 androd:exported="false"，声明不接收外部应用的广播；

3、使用本地广播 LocalBroadcastManager，其用于应用内部之间传播，不会泄露给外部应用。

4、广播私有权限的使用（以粘性广播为例）
4.1在AndroidManifest中配置权限，并静态注册成广播
```
<!--自定义权限-->
<permission android:name="com.sample.test.permission.sticky.receiver" android:protectionLevel="normal" />
<!--使用自定义权限-->
<uses-permission android:name="com.sample.test.permission.sticky.receiver"/>
<!--使用粘性广播发送权限-->
<uses-permission android:name="android.permission.BROADCAST_STICKY" />

<!--省略部分代码-->
<receiver android:name=".broadcast_receiver_test.StickyBroadcastReceiver">
   <!--android:permission="com.sample.test.permission.sticky.receiver"-->
   <!--android:permission 其他应用使用时，需要检测的权限-->
   <intent-filter>
       <action android:name="com.sample.test.sticky.broadcast.receiver" />
   </intent-filter>
</receiver>
```
4.2自定义广播类
```
public class StickyBroadcastReceiver extends BroadcastReceiver {

    public static final String Action = "com.sample.test.sticky.broadcast.receiver";
    public static final String PERMISSION = "com.sample.test.permission.sticky.receiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        int checkCallingOrSelfPermission = context.checkCallingOrSelfPermission(PERMISSION);
        if (PackageManager.PERMISSION_GRANTED == checkCallingOrSelfPermission) {
            //权限判断
            Toast.makeText(context, "授权成功", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(context, "授权失败", Toast.LENGTH_SHORT).show();
            throw new RuntimeException("permission denied");
        }
        if (intent != null && Action.equals(intent.getAction())) {
            Toast.makeText(context, intent.getStringExtra("info"), Toast.LENGTH_SHORT).show();
        }
    }

}
```
4.3发送广播
```
Intent intent = new Intent();
intent.setAction(StickyBroadcastReceiver.Action);
intent.putExtra("info", "sticky broadcast has been receiver");
sendStickyBroadcast(intent);
```



##不同Android API版本中广播机制相关API重要变迁
1、Android5.0 / API level 21 开始粘滞广播和有序粘滞广播过期，以后不再建议使用；
2、静态注册的广播接收器即使app已经退出，主要有相应的广播发出，依然可以接收到。但此种描述自Android 3.1开始有可能不再成立。

Android 3.1开始系统在Intent与广播相关的flag增加了参数，分别是：
FLAG_INCLUDE_STOPPED_PACKAGES：包含已经停止的包（停止：即包所在的进程已经退出）。

主要原因如下：
自Android3.1开始，系统本身则增加了对所有app当前是否处于运行状态的跟踪。在发送广播时，不管是什么广播类型，系统默认直接增加了值为FLAG_EXCLUDE_STOPPED_PACKAGES的flag，导致即使是静态注册的广播接收器，对于其所在进程已经退出的app，同样无法接收到广播。

##用EventBus实现广播的效果
待完成


##用RXBus实现广播效果
待完成















