

一、描述
    泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。
    参数化类型就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在调用时传入具体的类型（类型实参）。

    泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。
    也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，
    分别被称为   泛型类、泛型接口、泛型方法。

    总结来说就是：把具体的类型参数化。

二、泛型的作用
    1、在编译时检查类型安全；
    2、提高代码的重用率。


三、特性
    泛型只在编译阶段有效。
    在编译之后程序会采取去泛型化的措施。也就是说泛型只在编译阶段有效。
    在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。
    也就是说，泛型信息不会进入到运行时阶段。

四、泛型通配符 “？”
    类型通配符一般是使用“？”代替具体的类型实参，注意了，此处’？’是类型实参，而不是类型形参 。
    再直白点的意思就是，此处的？和Number、String、Integer一样都是一种实际的类型，可以把“？”看成所有类型的父类，是一种真实的类型。

    可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型。

    public class GenericsActivity extends BaseActivity {

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_generics);

            showKeyValue(new GenericsClass<>("string"));
            showKeyValue(new GenericsClass<>(123));
        }

        //泛型通配符？
        public void showKeyValue(GenericsClass<?> obj){
            Log.d("泛型测试","key value is " + obj.getKey());
        }
    }

五、泛型类
    ex:

    //此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型
    //在实例化泛型类时，必须指定T的具体类型
    public class Generic<T>{
        //key这个成员变量的类型为T,T的类型由外部指定
        private T key;

        public Generic(T key) { //泛型构造方法形参key的类型也为T，T的类型由外部指定
            this.key = key;
        }

        public T getKey(){ //泛型方法getKey的返回值类型为T，T的类型由外部指定
            return key;
        }
    }

    //泛型的类型参数只能是类类型（包括自定义类），不能是简单类型
    //传入的实参类型需与泛型的类型参数类型相同，即为Integer.
    Generic<Integer> genericInteger = new Generic<Integer>(123456);

    //传入的实参类型需与泛型的类型参数类型相同，即为String.
    Generic<String> genericString = new Generic<String>("key_value");
    Log.d("泛型测试","key is " + genericInteger.getKey());
    Log.d("泛型测试","key is " + genericString.getKey());


六、泛型接口
    泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中，可以看一个例子：
    //定义一个泛型接口
    public interface Generator<T> {
        public T next();
    }

    /**
     * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中
     * 即：class FirstGenerator<T> implements Generator<T>{
     * 如果不声明泛型，如：class FirstGenerator implements Generator<T>，编译器会报错："Unknown class"
     */
    public class FirstGenerator<T> implements Generator<T> {
        @Override
        public T makeSomeThing() {
            return null;
        }
    }

    /**
     * 传入泛型实参时：
     * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator<T>
     * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。
     * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型
     * 即：Generator<T>，public T makeSomeThing();中的的T都要替换成传入的String类型。
     */
    public class SecondGenerator implements Generator<String> {
        private String[] arrays = new String[] {"Apple", "Banana", "Pear"};

        @Override
        public String makeSomeThing() {
            return arrays[0];
        }
    }

七、泛型方法
    1、泛型方法的基本介绍
    /**
     * 泛型方法的基本介绍
     * @param tClass 传入的泛型实参
     * @return T 返回值为T类型
     * 说明：
     *     1）public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。
     *     2）只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。
     *     3）<T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。
     *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。
     */
    public <T> T genericMethod(Class<T> tClass)throws InstantiationException ,
      IllegalAccessException{
            T instance = tClass.newInstance();
            return instance;
    }

     /**
     * 这才是一个真正的泛型方法。
     * 首先在public与返回值之间的<T>必不可少，这表明这是一个泛型方法，并且声明了一个泛型T
     * 这个T可以出现在这个泛型方法的任意位置.
     * 泛型的数量也可以为任意多个
     *    如：public <T,K> K GenericsClass(Generic<T> container){
     *        ...
     *        }
     */
     public <T> T showKeyName(GenericsClass<T> container){
         Log.d("泛型测试","key value is " + container.getKey());
         T test = container.getKey();
         return test;
     }

    2、泛型方法和可变参数
        public <T> void printMsg( T... args){
            for(T t : args){
                Log.d("泛型测试","t is " + t);
            }
        }

        printMsg("111",222,"aaaa","2323.4",55.55);



八、泛型的上下边界
    //在泛型方法中添加上下边界限制的时候，必须在权限声明与返回值之间的<T>上添加上下边界，即在泛型声明的时候添加
    //public <T> T showKeyName(Generic<T extends Number> container)，编译器会报错："Unexpected bound"
    public <T extends Number> T showKeyName(Generic<T> container){
        System.out.println("container key :" + container.getKey());
        T test = container.getKey();
        return test;
    }


九、JVM泛型的擦除机制



